[
  {
    "kind": "index",
    "content": "\n# test-matching-route [![Coverage Status](https://coveralls.io/repos/github/jewelml/test-matching-route/badge.svg?branch=master)](https://coveralls.io/github/jewelml/test-matching-route?branch=master) [![Build Status](https://travis-ci.org/jewelml/test-matching-route.svg?branch=master)](https://travis-ci.org/jewelml/test-matching-route)\nTest a location against a list of possible routes. This is a simple way to test routes.\n\n## Example\n\nThis works for both socket servers and clients\n```javascript\n// SERVER CODE\nimport { findMatchingRoutePath, } from 'test-matching-route';\n\nconst routesObject = {\n  '/collections/:collection/products/:product': { page:'data1', },\n  '/products/:product': { page:'data2',  },\n  '/somedata/:collection/products/:id': { page:'data3', },\n  '/:product': { page:'data4',  },\n  '/:id': { page:'data5', },\n};\nconst routesArray = ['/collections/:collection/products/:product',  '/products/:product',  '/somedata/:collection/products/:id',  '/:product',  '/:id',];\n\nfindMatchingRoutePath(routesObject, '/products/cool-shoes'); // => '/products/:product'\nfindMatchingRoutePath(routesArray, '/collections/luxury/products/fancy-watch'); // => '/collections/:collection/products/:product'\n```\n",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "\n# test-matching-route [![Coverage Status](https://coveralls.io/repos/github/jewelml/test-matching-route/badge.svg?branch=master)](https://coveralls.io/github/jewelml/test-matching-route?branch=master) [![Build Status](https://travis-ci.org/jewelml/test-matching-route.svg?branch=master)](https://travis-ci.org/jewelml/test-matching-route)\nTest a location against a list of possible routes. This is a simple way to test routes.\n\n## Example\n\nThis works for both socket servers and clients\n```javascript\n// SERVER CODE\nimport { findMatchingRoutePath, } from 'test-matching-route';\n\nconst routesObject = {\n  '/collections/:collection/products/:product': { page:'data1', },\n  '/products/:product': { page:'data2',  },\n  '/somedata/:collection/products/:id': { page:'data3', },\n  '/:product': { page:'data4',  },\n  '/:id': { page:'data5', },\n};\nconst routesArray = ['/collections/:collection/products/:product',  '/products/:product',  '/somedata/:collection/products/:id',  '/:product',  '/:id',];\n\nfindMatchingRoutePath(routesObject, '/products/cool-shoes'); // => '/products/:product'\nfindMatchingRoutePath(routesArray, '/collections/luxury/products/fancy-watch'); // => '/collections/:collection/products/:product'\n```\n",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\r\n\r\nAll of the model building classes are structured similarly to ml.js models. Each model has three shared components regardless if it's a regression, classification or time series model.\r\n\r\nThis library was built to quickly implement [Tensorflow](https://js.tensorflow.org) and [Keras](https://js.tensorflow.org/tutorials/import-keras.html) models in JavaScript.\r\n\r\n## Configuration\r\n\r\nAll of the model configuration is managed during creating an instance of the class. All models have `fit` and `compile` properties that are assigned to the instance `settings` property.\r\n\r\nYou can also pass the Tensorflow reference to be used, as a configuration property if you want to use the compiled C++ or GPU via CUDA versions on the `tf` property;\r\n\r\n* `this.settings.compile` is passed to `tensorflow.model.compile` and contains the configuration for optimizers ([`read more`](https://js.tensorflow.org/api/latest/#tf.Model.compile)).\r\n* `this.settings.fit` is passed to `tensorflow.model.fit` and contains the configuration for model fitting ([`read more`](https://js.tensorflow.org/api/latest/#tf.Sequential.fit))\r\n\r\n### Model constructor example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\nimport tf from '@tensorflow/tfjs-node-gpu';\r\n\r\nconst MLR = new MultipleLinearRegression({\r\n  fit:{\r\n    epochs:500,\r\n    batchSize:5,\r\n  },\r\n  compile:{\r\n    loss: 'meanSquaredError',\r\n    optimizer: 'adam',\r\n  },\r\n},{\r\n  tf,\r\n});\r\n```\r\n\r\nEach constructor takes two parameters `settings` and `properties`. As in the example above, *settings* are used to configure tensorflow objects and properties are used to configure tensorscript (like which version of tensorflow to use).\r\n\r\n## Training\r\n\r\nAll tensorflow models train asynchronously, therefore all tensorscript model train functions are all asynchronous. Always pass dependent and independent variables as matrix inputs.\r\n\r\nTime series models can be trained with only one input matrix.\r\n\r\n### Training example\r\n\r\n```javascript\r\n\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n}\r\n```\r\n\r\n## Predicting\r\n\r\nAll prediction inputs must be the same shape as training inputs. TensorScript provides an asynchronous predict method that converts tensor values to javascript objects. If you want the tensor from tensorflow, use the calculate method instead.\r\n\r\n### Predicting example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n\r\n  await MLR.predict([[3]]) //=> [[5]];\r\n  const tensorPrediction = await MLR.calculate([[3]]) //=> [[5]];\r\n  tensorPrediction.data()\r\n    .then(tensors=> /*Typed Array*/)\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nFor more examples on how to do feature scaling and more, check out the *[Examples folder](https://github.com/repetere/tensorscript/tree/master/manual/examples)*.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/manual/faq.md",
    "name": "./manual/faq.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## 1.0.0 (2018-07-30)\n\n- **Feat**\n  - First Initial Release\n- **Fix**\n  - N/A\n- **Chore**\n  - Allow for multistep future forecasts in multivariate timeseries.\n  - Add basic clustering example.\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 0,
    "kind": "testFile",
    "name": "src/match.test.ts",
    "content": "import { expect, } from 'chai';\r\nimport { findMatchingRoutePath, getParameterizedPath, ROUTE_MAP, } from './index';\r\n\r\nconst routes = {\r\n  '/collections/:collection/products/:product': { page: 'data1', },\r\n  '/products/:product': { page: 'data2', },\r\n  '/somedata/:collection/products/:id': { page: 'data3', },\r\n  '/:product': { page: 'data4', },\r\n  '/:id': { page: 'data5', },\r\n  '/:product/:id.html': { page: 'htmlpage', },\r\n};\r\n\r\n// const m = findMatchingRoutePath(Object.keys(routes), '/products/asfdas', { return_matching_keys: true, });\r\n// console.log({m})\r\n\r\ndescribe('testMatchingScript', () => {\r\n  describe('findMatchingRoutePath', () => {\r\n    it('should return matching route from array of routes', () => {\r\n      expect(findMatchingRoutePath(Object.keys(routes), '/products/asfdas')).to.equal('/products/:product');\r\n      expect(findMatchingRoutePath(Object.keys(routes), '/products/asfdas#workwithhas')).to.equal('/products/:product');\r\n      expect(findMatchingRoutePath(Object.keys(routes), '/products/asfdas?someQueryString=true')).to.equal('/products/:product');\r\n      // expect(findMatchingRoutePath(Object.keys(routes), 'https://www.example.com/products/afdsf')).to.equal('/products/:product');\r\n    });\r\n    it('should return matching route from object of routes', () => {\r\n      const notARealLink = findMatchingRoutePath(routes, '/not/a/real/link');\r\n      \r\n      expect(notARealLink).to.be.undefined;\r\n      expect(findMatchingRoutePath(routes, '/collections/asfdas/products/afasf')).to.equal('/collections/:collection/products/:product');\r\n      expect(findMatchingRoutePath(routes, '/collections/ha8vsfjsaf/products/asdfa')).to.equal('/collections/:collection/products/:product');\r\n    });\r\n    it('should return matching params', () => { \r\n      const singlePage = '/richmond-dress/195311.html';\r\n      const singleURL = 'https://www.trinaturk.com/richmond-dress/195311.html';\r\n      const singlePageMatch = findMatchingRoutePath(routes, singlePage, { return_matching_keys: true, });\r\n      const singleURLMatch = findMatchingRoutePath(routes, singleURL, { return_matching_keys: true, });\r\n\r\n      expect(singleURLMatch).to.be.undefined;\r\n      expect(singlePageMatch).to.be.an('object');\r\n      expect(singlePageMatch).to.have.keys([ 'route', 'location', 'params', 're', ]);\r\n      expect(singlePageMatch.re).to.be.an('RegExp');\r\n      expect(singlePageMatch.params.product).to.eq('richmond-dress');\r\n      expect(singlePageMatch.params.id).to.eq( '195311');\r\n\r\n      // console.log({ singlePage, singlePageMatch, singleURL, singleURLMatch, });\r\n    });\r\n  });\r\n  describe('getParameterizedPath', () => {\r\n    it('should return parameterized path', () => { \r\n      const proute = getParameterizedPath('/products/:product');\r\n      expect(proute.keys).to.be.an('array');\r\n      expect(proute.keys).to.have.lengthOf(1);\r\n      expect(proute.re).to.be.instanceOf(RegExp);\r\n    });\r\n  });\r\n  describe('ROUTE_MAP', () => {\r\n    it('should store cached lookups in map', () => {\r\n      expect(ROUTE_MAP.size).to.eql(Object.keys(routes).length);\r\n    });\r\n    it('should return matching route from object of routes without route cache', () => {\r\n      const noCache = getParameterizedPath('/products/:product', { useMap: false, });\r\n      expect(noCache).to.be.an('object');\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/jewelml/test-matching-route/src/match.test.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "src/match.test.ts",
    "testDepth": 0,
    "static": true,
    "longname": "src/match.test.ts~describe0",
    "access": null,
    "description": "testMatchingScript",
    "lineNumber": 16
  },
  {
    "__docId__": 2,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "src/match.test.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe1",
    "access": null,
    "description": "findMatchingRoutePath",
    "lineNumber": 17
  },
  {
    "__docId__": 3,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "src/match.test.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe1.it2",
    "access": null,
    "description": "should return matching route from array of routes",
    "lineNumber": 18
  },
  {
    "__docId__": 4,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "src/match.test.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe1.it3",
    "access": null,
    "description": "should return matching route from object of routes",
    "lineNumber": 24
  },
  {
    "__docId__": 5,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "src/match.test.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe1.it4",
    "access": null,
    "description": "should return matching params",
    "lineNumber": 31
  },
  {
    "__docId__": 6,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "src/match.test.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe5",
    "access": null,
    "description": "getParameterizedPath",
    "lineNumber": 47
  },
  {
    "__docId__": 7,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "src/match.test.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe5.it6",
    "access": null,
    "description": "should return parameterized path",
    "lineNumber": 48
  },
  {
    "__docId__": 8,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "src/match.test.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe7",
    "access": null,
    "description": "ROUTE_MAP",
    "lineNumber": 55
  },
  {
    "__docId__": 9,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "src/match.test.ts~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe7.it8",
    "access": null,
    "description": "should store cached lookups in map",
    "lineNumber": 56
  },
  {
    "__docId__": 10,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "src/match.test.ts~describe0.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "src/match.test.ts~describe0.describe7.it9",
    "access": null,
    "description": "should return matching route from object of routes without route cache",
    "lineNumber": 59
  }
]